// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_PROVIDER")
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String         @unique
  emailVerified     DateTime?      @map("email_verified")
  image             String?
  password          String?        // For credentials provider
  role              UserRole       @default(FREE_TRIAL)
  subscriptionId    String?        @map("subscription_id") // Stripe subscription ID
  customerId        String?        @map("customer_id") // Stripe customer ID
  discountCodeUsed  String?        @map("discount_code_used") // Track which code was redeemed
  discordId         String?        @map("discord_id") // Discord user ID
  lastDiscordCheck  DateTime?      @map("last_discord_check") // Last time we verified Discord membership
  usageCount        Int            @default(0) @map("usage_count")
  dailyUsageCount   Int            @default(0) @map("daily_usage_count")
  lastUsageReset    DateTime       @default(now()) @map("last_usage_reset")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  
  accounts          Account[]
  sessions          Session[]
  analyses          ChannelAnalysis[]
  auditLogs         AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  FREE_TRIAL
  SAAS_SUBSCRIBER
  COURSE_MEMBER
  ADMIN
}

model ChannelAnalysis {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  channelId       String    @map("channel_id") // YouTube channel ID
  channelName     String    @map("channel_name")
  channelHandle   String?   @map("channel_handle")
  subscriberCount Int       @map("subscriber_count")
  totalViews      BigInt    @map("total_views")
  videoCount      Int       @map("video_count")
  estimatedNiche  String    @map("estimated_niche")
  analysisData    Json      @map("analysis_data") // Stores outlier analysis results
  createdAt       DateTime  @default(now()) @map("created_at")
  
  user            User      @relation(fields: [userId], references: [id])

  @@map("channel_analyses")
}

model Niche {
  id          String   @id @default(cuid())
  name        String   @unique
  longFormRpm Float    @map("long_form_rpm") // RPM for long-form content
  shortsRpm   Float    @default(0.15) @map("shorts_rpm") // Always $0.15 for Shorts
  keywords    String // JSON string of keywords that map to this niche
  category    String   // Broader category grouping
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("niches")
}

model DiscountCode {
  id          String    @id @default(cuid())
  code        String    @unique
  email       String?   // Optional: restrict to specific email
  usedBy      String?   @map("used_by") // User ID who redeemed
  usedAt      DateTime? @map("used_at")
  cohort      String?   // "course_batch_january_2025"
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("discount_codes")
}

model Channel {
  id                      String            @id
  channelTitle            String            @map("channel_title")
  description             String?
  primaryNiche            String?           @map("primary_niche")
  uploadFrequencyPerWeek  Float?            @map("upload_frequency_per_week")
  thumbnailUrl            String?           @map("thumbnail_url")
  isMonetized             Boolean?          @map("is_monetized")
  monetizationLastChecked DateTime?         @map("monetization_last_checked")
  createdAt               DateTime          @default(now()) @map("created_at")
  lastSnapshotAt          DateTime?         @map("last_snapshot_at")
  
  snapshots               ChannelSnapshot[]
  videoAnalysis           VideoAnalysis[]
  analysisCache           AnalysisCache?
  intelligentInsights     IntelligentInsight[]
  contentRecommendations  ContentRecommendation[]
  
  @@map("channels")
}

model ChannelSnapshot {
  id                    Int       @id @default(autoincrement())
  channelId             String    @map("channel_id")
  timestamp             DateTime  @default(now())
  subscriberCount       Int       @map("subscriber_count")
  monthlyViewsLong      BigInt    @map("monthly_views_long")
  monthlyViewsShorts    BigInt    @map("monthly_views_shorts")
  estRevenueLongUsd     Float     @map("est_revenue_long_usd")
  estRevenueShortsUsd   Float     @map("est_revenue_shorts_usd")
  
  channel               Channel   @relation(fields: [channelId], references: [id])
  
  @@map("channel_snapshots")
}

model NicheRpmRate {
  id                    Int       @id @default(autoincrement())
  niche                 String    @unique
  displayName           String    @map("display_name")
  minRpmUsd             Float     @map("min_rpm_usd")
  maxRpmUsd             Float     @map("max_rpm_usd")
  averageRpmUsd         Float     @map("average_rpm_usd")
  shortsRpmUsd          Float     @map("shorts_rpm_usd") @default(0.15)
  confidence            String    // "high", "medium", "low"
  dataSource            String    @map("data_source")
  lastUpdated           DateTime  @default(now()) @map("last_updated")
  sampleSize            String?   @map("sample_size")
  notes                 String?
  
  @@map("niche_rpm_rates")
}

model VideoAnalysis {
  id                    Int       @id @default(autoincrement())
  channelId             String    @map("channel_id")
  videoId               String    @map("video_id")
  title                 String
  viewCount             BigInt    @map("view_count")
  duration              String    // ISO 8601 format (PT4M13S)
  isShort               Boolean   @map("is_short") // true if duration <= 60 seconds
  publishedAt           DateTime  @map("published_at")
  videoUrl              String    @map("video_url") // https://youtube.com/watch?v={video_id}
  thumbnailUrl          String?   @map("thumbnail_url")
  isOutlierLongform     Boolean   @map("is_outlier_longform") @default(false)
  isOutlierShorts       Boolean   @map("is_outlier_shorts") @default(false)
  longformMultiplier    Float?    @map("longform_multiplier") // vs longform average
  shortsMultiplier      Float?    @map("shorts_multiplier") // vs shorts average
  extractedPatterns     String?   @map("extracted_patterns") // JSON string
  createdAt             DateTime  @default(now()) @map("created_at")
  
  channel               Channel   @relation(fields: [channelId], references: [id])
  
  @@unique([channelId, videoId])
  @@map("video_analysis")
}

model AnalysisCache {
  id                    Int       @id @default(autoincrement())
  channelId             String    @unique @map("channel_id")
  tier                  String    @default("free") // free, standard, premium
  videosAnalyzed        Int       @map("videos_analyzed")
  totalVideoCount       Int       @map("total_video_count")
  lastFullFetch         DateTime  @map("last_full_fetch")
  lastIncrementalUpdate DateTime? @map("last_incremental_update")
  cacheExpiresAt        DateTime  @map("cache_expires_at")
  uploadFrequency       Float?    @map("upload_frequency_per_week")
  cacheDurationHours    Int       @map("cache_duration_hours")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  channel               Channel   @relation(fields: [channelId], references: [id])
  
  @@map("analysis_cache")
}

model IntelligentInsight {
  id                    Int       @id @default(autoincrement())
  channelId             String    @map("channel_id")
  insightType           String    @map("insight_type") // "outlier", "pattern", "opportunity", "warning"
  category              String    // "hook", "format", "niche", "monetization", "growth"
  title                 String
  description           String    // Detailed explanation
  knowledgeBaseRef      String    @map("knowledge_base_ref") // Reference to specific KB principle
  severity              String    // "critical", "high", "medium", "low"
  score                 Float     // 0-100 score based on importance
  actionable            Boolean   @default(true)
  relatedVideoIds       String?   @map("related_video_ids") // JSON array of video IDs
  metrics               String?   // JSON object with supporting metrics
  createdAt             DateTime  @default(now()) @map("created_at")
  expiresAt             DateTime  @map("expires_at") // When this insight becomes stale
  
  channel               Channel   @relation(fields: [channelId], references: [id])
  
  @@index([channelId, insightType])
  @@index([channelId, category])
  @@map("intelligent_insights")
}

model ContentRecommendation {
  id                    Int       @id @default(autoincrement())
  channelId             String    @map("channel_id")
  priority              Int       // 1 (highest) to 10 (lowest)
  recommendationType    String    @map("recommendation_type") // "content", "strategy", "optimization", "format"
  title                 String
  description           String    // Detailed recommendation
  expectedImpact        String    @map("expected_impact") // "10x views", "2x revenue", etc.
  implementationSteps   String    @map("implementation_steps") // JSON array of steps
  requiredResources     String?   @map("required_resources") // JSON object (tools, time, skills)
  difficultyLevel       String    @map("difficulty_level") // "easy", "medium", "hard"
  timeToImplement       String    @map("time_to_implement") // "1 hour", "1 day", "1 week"
  knowledgeBaseRef      String    @map("knowledge_base_ref") // KB principle reference
  successExamples       String?   @map("success_examples") // JSON array of similar successful cases
  potentialScore        Float     @map("potential_score") // 0-100 based on QVS framework
  createdAt             DateTime  @default(now()) @map("created_at")
  status                String    @default("pending") // "pending", "implemented", "rejected"
  
  channel               Channel   @relation(fields: [channelId], references: [id])
  
  @@index([channelId, priority])
  @@index([channelId, status])
  @@map("content_recommendations")
}

model VideoInsight {
  id                    Int       @id @default(autoincrement())
  videoId               String    @map("video_id")
  channelId             String    @map("channel_id")
  insightType           String    @map("insight_type") // "hook_analysis", "retention_pattern", "format_success"
  hookEffectiveness     Float?    @map("hook_effectiveness") // 0-100 score
  formatAlignment       Float?    @map("format_alignment") // How well it aligns with successful formats
  viralFactors          String?   @map("viral_factors") // JSON array of factors contributing to success
  improvementAreas      String?   @map("improvement_areas") // JSON array of specific improvements
  competitorComparison  String?   @map("competitor_comparison") // JSON object comparing to similar videos
  createdAt             DateTime  @default(now()) @map("created_at")
  
  @@unique([videoId, insightType])
  @@index([channelId])
  @@map("video_insights")
}

model NicheAnalysis {
  id                    Int       @id @default(autoincrement())
  niche                 String    @unique
  saturationLevel       Float     @map("saturation_level") // 0-100 (0 = opportunity, 100 = oversaturated)
  competitorCount       Int       @map("competitor_count")
  avgViewsPerVideo      BigInt    @map("avg_views_per_video")
  topPerformers         String    @map("top_performers") // JSON array of top channel IDs
  emergingTrends        String?   @map("emerging_trends") // JSON array of trending topics
  entryBarrier          String    @map("entry_barrier") // "low", "medium", "high"
  monetizationPotential Float     @map("monetization_potential") // 0-100 score
  recommendedFormats    String    @map("recommended_formats") // JSON array of format suggestions
  crossPlatformData     String?   @map("cross_platform_data") // JSON object with TikTok/Instagram data
  lastUpdated           DateTime  @default(now()) @map("last_updated")
  
  @@map("niche_analysis")
}

model AuditLog {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  userEmail     String    @map("user_email")
  action        String    // "admin_login", "discount_code_generated", "user_role_changed", etc.
  resource      String?   // What was affected (user_id, discount_code, etc.)
  details       String?   // JSON object with additional details
  ipAddress     String    @map("ip_address")
  userAgent     String?   @map("user_agent")
  severity      String    @default("info") // "info", "warning", "error", "critical"
  createdAt     DateTime  @default(now()) @map("created_at")
  
  user          User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}