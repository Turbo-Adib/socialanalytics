// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Channel {
  id                      String            @id
  channelTitle            String            @map("channel_title")
  description             String?
  primaryNiche            String?           @map("primary_niche")
  uploadFrequencyPerWeek  Float?            @map("upload_frequency_per_week")
  thumbnailUrl            String?           @map("thumbnail_url")
  isMonetized             Boolean?          @map("is_monetized")
  monetizationLastChecked DateTime?         @map("monetization_last_checked")
  createdAt               DateTime          @default(now()) @map("created_at")
  lastSnapshotAt          DateTime?         @map("last_snapshot_at")
  
  snapshots               ChannelSnapshot[]
  videoAnalysis           VideoAnalysis[]
  analysisCache           AnalysisCache?
  
  @@map("channels")
}

model ChannelSnapshot {
  id                    Int       @id @default(autoincrement())
  channelId             String    @map("channel_id")
  timestamp             DateTime  @default(now())
  subscriberCount       Int       @map("subscriber_count")
  monthlyViewsLong      BigInt    @map("monthly_views_long")
  monthlyViewsShorts    BigInt    @map("monthly_views_shorts")
  estRevenueLongUsd     Float     @map("est_revenue_long_usd")
  estRevenueShortsUsd   Float     @map("est_revenue_shorts_usd")
  
  channel               Channel   @relation(fields: [channelId], references: [id])
  
  @@map("channel_snapshots")
}

model NicheRpmRate {
  id                    Int       @id @default(autoincrement())
  niche                 String    @unique
  displayName           String    @map("display_name")
  minRpmUsd             Float     @map("min_rpm_usd")
  maxRpmUsd             Float     @map("max_rpm_usd")
  averageRpmUsd         Float     @map("average_rpm_usd")
  shortsRpmUsd          Float     @map("shorts_rpm_usd") @default(0.15)
  confidence            String    // "high", "medium", "low"
  dataSource            String    @map("data_source")
  lastUpdated           DateTime  @default(now()) @map("last_updated")
  sampleSize            String?   @map("sample_size")
  notes                 String?
  
  @@map("niche_rpm_rates")
}

model VideoAnalysis {
  id                    Int       @id @default(autoincrement())
  channelId             String    @map("channel_id")
  videoId               String    @map("video_id")
  title                 String
  viewCount             BigInt    @map("view_count")
  duration              String    // ISO 8601 format (PT4M13S)
  isShort               Boolean   @map("is_short") // true if duration <= 60 seconds
  publishedAt           DateTime  @map("published_at")
  videoUrl              String    @map("video_url") // https://youtube.com/watch?v={video_id}
  thumbnailUrl          String?   @map("thumbnail_url")
  isOutlierLongform     Boolean   @map("is_outlier_longform") @default(false)
  isOutlierShorts       Boolean   @map("is_outlier_shorts") @default(false)
  longformMultiplier    Float?    @map("longform_multiplier") // vs longform average
  shortsMultiplier      Float?    @map("shorts_multiplier") // vs shorts average
  extractedPatterns     String?   @map("extracted_patterns") // JSON string
  createdAt             DateTime  @default(now()) @map("created_at")
  
  channel               Channel   @relation(fields: [channelId], references: [id])
  
  @@unique([channelId, videoId])
  @@map("video_analysis")
}

model AnalysisCache {
  id                    Int       @id @default(autoincrement())
  channelId             String    @unique @map("channel_id")
  tier                  String    @default("free") // free, standard, premium
  videosAnalyzed        Int       @map("videos_analyzed")
  totalVideoCount       Int       @map("total_video_count")
  lastFullFetch         DateTime  @map("last_full_fetch")
  lastIncrementalUpdate DateTime? @map("last_incremental_update")
  cacheExpiresAt        DateTime  @map("cache_expires_at")
  uploadFrequency       Float?    @map("upload_frequency_per_week")
  cacheDurationHours    Int       @map("cache_duration_hours")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  channel               Channel   @relation(fields: [channelId], references: [id])
  
  @@map("analysis_cache")
}